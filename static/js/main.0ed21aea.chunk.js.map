{"version":3,"sources":["components/Circle.js","components/Cells.js","components/Row.js","components/SquareGrid.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Circle","_ref","cell","color","style","backgroundColor","react_default","a","createElement","className","Cells","row","col","onClickHandler","onClick","components_Circle","Row","props","cells","i","push","components_Cells","key","display","SquareGrid","console","log","rows","components_Row","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","board","state","temp","slice","checkForTie","setState","tie","winner","emptyRow","rowWhereCoinBeAdded","player","checkWinner","length","y","restartGame","Array","fill","checkHorizontalWinner","value","checkVerticalWinner","checkDiagonal","rR","cR","rL","cL","_this2","status","components_SquareGrid","Component","App","Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ed21aea.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Circle = ({ cell }) => {\n  let color = \"#182C61\";\n  if (cell === 1) {\n    color = \"#f46b45\";\n  } else if (cell === 2) {\n    color = \"#00d2d3\";\n  }\n\n  var style = {\n    backgroundColor: color\n  };\n\n  return <div className=\"circle\" style={style} />;\n};\n\nexport default Circle;\n","import React from \"react\";\nimport Circle from \"./Circle\";\n\nconst Cells = ({ row, col, cell, onClickHandler }) => {\n  return (\n    <div className=\"squareGrid\" onClick={() => onClickHandler(row, col)}>\n      <Circle cell={cell} />\n    </div>\n  );\n};\n\nexport default Cells;\n","import React from \"react\";\nimport Cells from \"./Cells\";\n\nconst Row = props => {\n  let style = {\n    display: \"flex\"\n  };\n  let cells = [];\n  for (let i = 0; i < 7; i++) {\n    cells.push(\n      <Cells\n        key={i}\n        cell={props.cells[i]}\n        row={props.row}\n        col={i}\n        onClickHandler={props.onClickHandler}\n      />\n    );\n  }\n  return <div style={style}> {cells} </div>;\n};\n\nexport default Row;\n","import React from \"react\";\nimport Row from \"./Row\";\n\nconst SquareGrid = props => {\n  console.log(props);\n  let rows = [];\n  for (let i = 5; i >= 0; i--) {\n    rows.push(\n      <Row\n        key={i}\n        row={i}\n        cells={props.cells[i]}\n        onClickHandler={props.onClickHandler}\n      />\n    );\n  }\n  return <div>{rows}</div>;\n};\n\nexport default SquareGrid;\n","import React, { Component } from \"react\";\nimport SquareGrid from \"./SquareGrid\";\nexport default class Board extends Component {\n  constructor(props) {\n    super(props);\n    let cells = [];\n    for (let i = 0; i < 6; i++) {\n      cells.push(new Array(7).fill(0));\n    }\n    this.state = {\n      cells: cells,\n      player: false,\n      winner: 0,\n      tie: false\n    };\n  }\n\n  onClickHandler = (row, col) => {\n    let board = this.state.cells;\n    let temp = [];\n\n    for (let i = 0; i < 6; i++) {\n      temp.push(board[i].slice());\n    }\n\n    //check for tie\n    let tie = this.checkForTie(board);\n\n    if (tie) {\n      console.log(\"tie\");\n      this.setState({\n        tie: true\n      });\n    }\n    //if winner stop user for adding coins\n    if (this.state.winner) return;\n\n    console.log(\"temp is\" + temp);\n    let emptyRow = this.rowWhereCoinBeAdded(col);\n    console.log(emptyRow);\n    temp[emptyRow][col] = this.state.player ? 1 : 2;\n    this.setState(\n      {\n        cells: temp,\n        player: !this.state.player\n      },\n      () => {\n        if (this.checkWinner(emptyRow, col) > 0) {\n          console.log(\"winner\");\n          this.setState({\n            winner: this.state.player ? 2 : 1\n          });\n        }\n      }\n    );\n  };\n  rowWhereCoinBeAdded = col => {\n    for (let i = 0; i < 6; i++) {\n      if (this.state.cells[i][col] === 0) {\n        return i;\n      }\n    }\n    return -1;\n  };\n  //draw\n\n  checkForTie = board => {\n    for (let i = 0; i < board.length; i++) {\n      for (let y = 0; y < board[i].length; y++) {\n        if (board[i][y] === 0) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n  //restart\n\n  restartGame = () => {\n    var cells = [];\n    for (let i = 0; i < 6; i++) {\n      cells.push(new Array(7).fill(0));\n    }\n    this.setState({\n      cells: cells,\n      tie: false,\n      player: false,\n      winner: 0\n    });\n  };\n  //check winner\n\n  //horizontal win\n\n  checkHorizontalWinner = (row, col) => {\n    let cells = this.state.cells;\n\n    let i = 6;\n\n    let value = this.state.player ? 2 : 1;\n\n    while (i >= 3) {\n      if (\n        cells[row][i] === value &&\n        cells[row][i - 1] === value &&\n        cells[row][i - 2] === value &&\n        cells[row][i - 3] === value\n      ) {\n        return 1;\n      }\n      i--;\n    }\n    return 0;\n  };\n\n  checkVerticalWinner = (row, col) => {\n    let cells = this.state.cells;\n    //   let i = row;\n    let value = this.state.player ? 2 : 1;\n\n    if (row >= 3) {\n      if (\n        cells[row][col] === value &&\n        cells[row - 1][col] === value &&\n        cells[row - 2][col] === value &&\n        cells[row - 3][col] === value\n      ) {\n        return 1;\n      }\n    }\n    return 0;\n  };\n  //check winner\n  checkWinner = (row, col) => {\n    return (\n      this.checkHorizontalWinner(row, col) ||\n      this.checkVerticalWinner(row, col) ||\n      this.checkDiagonal(row, col)\n    );\n  };\n\n  checkDiagonal(row, col) {\n    //find right and left tops\n    var cells = this.state.cells;\n    var value = this.state.player ? 2 : 1;\n    var rR = row;\n    var cR = col;\n    while (rR < 5 && cR < 6) {\n      rR++;\n      cR++;\n    }\n    while (rR >= 3 && cR >= 3) {\n      if (\n        cells[rR][cR] === value &&\n        cells[rR - 1][cR - 1] === value &&\n        cells[rR - 2][cR - 2] === value &&\n        cells[rR - 3][cR - 3] === value\n      ) {\n        return 1;\n      }\n      rR--;\n      cR--;\n    }\n\n    var rL = row;\n    var cL = col;\n\n    while (rL < 5 && cL > 0) {\n      rL++;\n      cL--;\n    }\n\n    while (rL >= 3 && cL <= 3) {\n      if (\n        cells[rL][cL] === value &&\n        cells[rL - 1][cL + 1] === value &&\n        cells[rL - 2][cL + 2] === value &&\n        cells[rL - 3][cL + 3] === value\n      ) {\n        return 1;\n      }\n      rL--;\n      cL++;\n    }\n    return 0;\n  }\n\n  render() {\n    let status = \"\";\n    if (this.state.winner > 0) {\n      if (this.state.winner === 1) {\n        status = <p>Hurray! Player 2 wins</p>;\n      } else {\n        status = <p>Hurray! Player 1 wins</p>;\n      }\n    } else if (this.state.player) {\n      status = <p>Player 2's Turn</p>;\n    } else if (!this.state.winner && this.state.tie) {\n      status = <p>Its a Tie</p>;\n    } else {\n      status = <p>Player 1's Turn</p>;\n    }\n    return (\n      <div>\n        <p className=\"status\">{status}</p>\n        <SquareGrid\n          cells={this.state.cells}\n          onClickHandler={this.onClickHandler}\n        />\n        <button className=\"btn-restart\" onClick={() => this.restartGame()}>\n          Restart\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Board from \"./components/Board\";\n\nfunction App() {\n  return (\n    <div className=\"main-board\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}